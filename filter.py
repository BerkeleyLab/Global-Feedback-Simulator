# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_filter', [dirname(__file__)])
        except ImportError:
            import _filter
            return _filter
        if fp is not None:
            try:
                _mod = imp.load_module('_filter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _filter = swig_import_helper()
    del swig_import_helper
else:
    import _filter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _filter.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _filter.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _filter.intArray___setitem__(self, *args)
    def cast(self): return _filter.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _filter.intArray_frompointer
    if _newclass:frompointer = staticmethod(_filter.intArray_frompointer)
intArray_swigregister = _filter.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _filter.intArray_frompointer(*args)
intArray_frompointer = _filter.intArray_frompointer

class complexdouble_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complexdouble_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complexdouble_Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _filter.new_complexdouble_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter.delete_complexdouble_Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _filter.complexdouble_Array___getitem__(self, *args)
    def __setitem__(self, *args): return _filter.complexdouble_Array___setitem__(self, *args)
    def cast(self): return _filter.complexdouble_Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _filter.complexdouble_Array_frompointer
    if _newclass:frompointer = staticmethod(_filter.complexdouble_Array_frompointer)
complexdouble_Array_swigregister = _filter.complexdouble_Array_swigregister
complexdouble_Array_swigregister(complexdouble_Array)

def complexdouble_Array_frompointer(*args):
  return _filter.complexdouble_Array_frompointer(*args)
complexdouble_Array_frompointer = _filter.complexdouble_Array_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _filter.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _filter.intp_assign(self, *args)
    def value(self): return _filter.intp_value(self)
    def cast(self): return _filter.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _filter.intp_frompointer
    if _newclass:frompointer = staticmethod(_filter.intp_frompointer)
intp_swigregister = _filter.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _filter.intp_frompointer(*args)
intp_frompointer = _filter.intp_frompointer

class compp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _filter.new_compp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter.delete_compp
    __del__ = lambda self : None;
    def assign(self, *args): return _filter.compp_assign(self, *args)
    def value(self): return _filter.compp_value(self)
    def cast(self): return _filter.compp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _filter.compp_frompointer
    if _newclass:frompointer = staticmethod(_filter.compp_frompointer)
compp_swigregister = _filter.compp_swigregister
compp_swigregister(compp)

def compp_frompointer(*args):
  return _filter.compp_frompointer(*args)
compp_frompointer = _filter.compp_frompointer

class Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alloc_order"] = _filter.Filter_alloc_order_set
    __swig_getmethods__["alloc_order"] = _filter.Filter_alloc_order_get
    if _newclass:alloc_order = _swig_property(_filter.Filter_alloc_order_get, _filter.Filter_alloc_order_set)
    __swig_setmethods__["alloc_coeffs"] = _filter.Filter_alloc_coeffs_set
    __swig_getmethods__["alloc_coeffs"] = _filter.Filter_alloc_coeffs_get
    if _newclass:alloc_coeffs = _swig_property(_filter.Filter_alloc_coeffs_get, _filter.Filter_alloc_coeffs_set)
    __swig_setmethods__["n_coeffs"] = _filter.Filter_n_coeffs_set
    __swig_getmethods__["n_coeffs"] = _filter.Filter_n_coeffs_get
    if _newclass:n_coeffs = _swig_property(_filter.Filter_n_coeffs_get, _filter.Filter_n_coeffs_set)
    __swig_setmethods__["order"] = _filter.Filter_order_set
    __swig_getmethods__["order"] = _filter.Filter_order_get
    if _newclass:order = _swig_property(_filter.Filter_order_get, _filter.Filter_order_set)
    __swig_setmethods__["modes"] = _filter.Filter_modes_set
    __swig_getmethods__["modes"] = _filter.Filter_modes_get
    if _newclass:modes = _swig_property(_filter.Filter_modes_get, _filter.Filter_modes_set)
    __swig_setmethods__["coeff_start"] = _filter.Filter_coeff_start_set
    __swig_getmethods__["coeff_start"] = _filter.Filter_coeff_start_get
    if _newclass:coeff_start = _swig_property(_filter.Filter_coeff_start_get, _filter.Filter_coeff_start_set)
    __swig_setmethods__["coeffs"] = _filter.Filter_coeffs_set
    __swig_getmethods__["coeffs"] = _filter.Filter_coeffs_get
    if _newclass:coeffs = _swig_property(_filter.Filter_coeffs_get, _filter.Filter_coeffs_set)
    __swig_setmethods__["poles"] = _filter.Filter_poles_set
    __swig_getmethods__["poles"] = _filter.Filter_poles_get
    if _newclass:poles = _swig_property(_filter.Filter_poles_get, _filter.Filter_poles_set)
    def __init__(self): 
        this = _filter.new_Filter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _filter.delete_Filter
    __del__ = lambda self : None;
Filter_swigregister = _filter.Filter_swigregister
Filter_swigregister(Filter)


def Filter_Allocate_New(*args):
  return _filter.Filter_Allocate_New(*args)
Filter_Allocate_New = _filter.Filter_Allocate_New

def Filter_Allocate_In(*args):
  return _filter.Filter_Allocate_In(*args)
Filter_Allocate_In = _filter.Filter_Allocate_In

def Filter_Append_Modes(*args):
  return _filter.Filter_Append_Modes(*args)
Filter_Append_Modes = _filter.Filter_Append_Modes
# This file is compatible with both classic and new-style classes.


