#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
NGLS LLRF Source Code Map
\end_layout

\begin_layout Author
Alejandro F Queiruga
\begin_inset Newline newline
\end_inset

Daniel Scott Driver
\end_layout

\begin_layout Abstract
This document provides a map of all of the files that make up the source
 code.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
center{
\end_layout

\end_inset


\begin_inset Graphics
	filename diagrams/codeoutline.png
	lyxscale 25
	height 100theight%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Program flow chart with files
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Supporting Files
\end_layout

\begin_layout Description
doswig.sh Compiles the C code into the shared object file used by Python.
\end_layout

\begin_layout Description
linac.i Defines the swig interface to the C code to be wrapped into Python
 objects.
\end_layout

\begin_layout Description
linac_pretty_print.py Routines for printing out parameter data structures
 and making graphs of things.
 Useful for debugging.
\end_layout

\begin_layout Section
C Files
\end_layout

\begin_layout Description
beam_based_feedback.c/h Data structure and routines for representing and
 applying the beam based feedback controls.
 See bbf_config.py.
 Defines BBF_Param.
\end_layout

\begin_layout Description
doublecompress.c/h Implementation of double compress calculation.
 Defines Doublecompress_State, Dynamic_Param.
\end_layout

\begin_layout Description
dynamic_noise.c/h Data structure and routine for applying sources of noise
 during the simulation.
 Defines Noise_Source.
\end_layout

\begin_layout Description
filter.c/h Data structure for representing an arbitrary filter.
 Defines Filter, Filter_State
\end_layout

\begin_layout Description
linac_param.c/h Data structures and configuration routines for Linac segments
 and their components.
 Defines FPGA_Param, Cavity, Linac_Param, Gun_Param.
\end_layout

\begin_layout Description
state_space_top.c/h The top level routine for running a simulation, as well
 as routines for allocating the buffers for history data.
\end_layout

\begin_layout Description
step_llrf.c/h The data structures and routines for representing the LLRF
 and Cavity control loop.
 Defines FPGA_State, Cavity_State, Linac_State.
\end_layout

\begin_layout Section
Python Files
\end_layout

\begin_layout Description
bbf_config.py Configures the beam based feedback data structures from the
 configuration files.
 Generates the Singular Value Decomposition from the Jacobian matrix of
 doublecompress and packs the pseudoinverse into the C data structure.
\end_layout

\begin_layout Description
full_dc_matrix.py Computes the numerical derivative Jacobian matrix by calling
 the C routine doublecompress many times.
\end_layout

\begin_layout Description
main.py The main routine to the program.
 Execute this from the command line.
\end_layout

\begin_layout Description
noise_config.py Configures the noise data structures using a dictionary.
\end_layout

\begin_layout Description
readjson/loadconfig.py Routines to read in JSON configuration files and alocate
 and configure the C paramter data structures.
\end_layout

\begin_layout Description
readjson/readjson.py Helper routines to loadconfig.py
\end_layout

\begin_layout Section
Unit Tests
\end_layout

\begin_layout Description
unit_tests.py A few basic tests for some small routines.
 No hard-coded numerical assertions, passing is based on visual inspection.
\end_layout

\begin_layout Description
unit_test_components.py Runs a series of tests on step_llrf.c for step_triode(),
 step_cavity(), and step_llrf().
 Comparisons are made to data produced from the Octave code, which was run
 at a previous time and saved into unit_test_data/*.csv.
 The tests are one of the following:
\end_layout

\begin_deeper
\begin_layout Enumerate
Hold the previous states at 0, and vary one input while all others are fixed.
\end_layout

\begin_layout Enumerate
Hold all inputs fixed, and allow the component to march forward in time.
\end_layout

\begin_layout Standard
The outputs from the routine are then compared to the Octave data via the
 two-norm of the difference.
 The test prints passed if the results are below the specified tolerance.
\end_layout

\end_deeper
\begin_layout Description
test_doublecompress/test_doublecompress(_new|octave).py Compares the C version
 of doublecompress to the Octave version.
 Tests multiple random inputs on both versions and evaluates the norms of
 the differences.
 Prints pass if the maximum error encountered was below the specified tolerance.
 Different versions of this routine are for the different C implementations
 of doublecompress.
 Supporting files in this directory include the Octave code and config files.
\end_layout

\begin_layout Description
test_dc_matrix/test_dc_matrix.py Compares the Jacobian matrix produced by
 the C code and the Octave code in a similar fashion to test_doublecompress,
 i.e.
 by calling both versions with many different random inputs.
 Prints pass if the maximum error encountered was below the specified tolerance.
 Supporting files in this directory include the Octave code and config files.
\end_layout

\begin_layout Description
unit_tests_top.py Runs state_space_top for a few iterations to do basic debugging
 and comparision to the Octave model.
 Comparison not included in the code, does not print pass.
\end_layout

\begin_layout Description
unit_test_bbf.py Generates the pseudoinverse using bbf_config.py, for comparison
 to the pseudoinverse generated by the Octave code.
 Beam based feedback is incomplete, so this test does not print passed,
 only the pseudoinverse.
\end_layout

\end_body
\end_document
