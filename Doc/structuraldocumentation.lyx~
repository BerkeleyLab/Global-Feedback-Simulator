#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
NGLS LLRF Documenation
\end_layout

\begin_layout Author
Alejandro F Queiruga
\begin_inset Newline newline
\end_inset

Daniel Scott Driver
\end_layout

\begin_layout Abstract
This document presents how to run and utilize the Python and C LLRF model.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Quick Start
\end_layout

\begin_layout Enumerate
Execute 
\begin_inset Quotes eld
\end_inset

sh doswig.sh
\begin_inset Quotes erd
\end_inset

.
 This will compile the C code and build a Shared Object file with SWIG called
 linac.so that will be used by the Python code.
 This only needs to be done once per system, or everytime a change is made
 to the C source code.
 
\end_layout

\begin_layout Enumerate
Set up the configuration files as desired.
 Defaults for the NGLS are contained in the directory 
\begin_inset Quotes eld
\end_inset

configfiles
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Execute the simulation with the format 
\begin_inset Quotes eld
\end_inset

python main.py output.txt config1.cfg config2.cfg etc...
\begin_inset Quotes erd
\end_inset

.
 This will load the configuration files config1.cfg, and output data to output.txt.
 The default set up can be run with
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python main.py outputdata/test.txt configfiles/default_accelerator.cfg 
\backslash

\end_layout

\begin_layout Plain Layout

configfiles/NGLS_Accelerator.cfg configfiles/bbf_causal.cfg 
\backslash

\end_layout

\begin_layout Plain Layout

configfiles/noise_test.cfg
\end_layout

\end_inset

This command will write data to outputdata/test.txt after reading in the
 four files listed.
 See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Building-the-dictionary"

\end_inset

.
\end_layout

\begin_layout Enumerate
Parse the output data.
 DAN'S STUFF HERE
\end_layout

\begin_layout Section
Compilation
\end_layout

\begin_layout Standard
The codebase has the following dependencies:
\end_layout

\begin_layout Enumerate
Python 2.7
\end_layout

\begin_layout Enumerate
Numpy, Scipy, Matplotlib - Python packages.
 The code was developed with the following versions:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

In [1]: import numpy, scipy, matplotlib
\end_layout

\begin_layout Plain Layout

In [2]: numpy.__version__
\end_layout

\begin_layout Plain Layout

Out[2]: '1.6.2'
\end_layout

\begin_layout Plain Layout

In [3]: scipy.__version__
\end_layout

\begin_layout Plain Layout

Out[3]: '0.10.1'
\end_layout

\begin_layout Plain Layout

In [4]: matplotlib.__version__
\end_layout

\begin_layout Plain Layout

Out[4]: '1.1.1rc2' 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Swig, with the following version:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ swig -version
\end_layout

\begin_layout Plain Layout

SWIG Version 2.0.7
\end_layout

\begin_layout Plain Layout

Compiled with g++ [x86_64-unknown-linux-gnu]
\end_layout

\begin_layout Plain Layout

Configured options: +pcre
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Pydot - Python wrapper of Graphviz, used for generating images of connectivities.
\end_layout

\begin_layout Standard
The shell script 
\begin_inset Quotes eld
\end_inset

doswig.sh
\begin_inset Quotes erd
\end_inset

 generates the required shared object file.
 This script only needs to be run once unless changes are made to any C
 code.
 First, the swig command generates a wrapper file for Python from the file
 
\begin_inset Quotes eld
\end_inset

linac.i
\begin_inset Quotes erd
\end_inset

 and outputs the files 
\begin_inset Quotes eld
\end_inset

linac_wrap.c
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

linac.py
\begin_inset Quotes erd
\end_inset

.
 Then, all of the C files for the project are compiled into object files.
 ld is called on all of the object files to generate a single shared object
 file, 
\begin_inset Quotes eld
\end_inset

linac.so
\begin_inset Quotes erd
\end_inset

.
 This file is loaded upon importing the file 
\begin_inset Quotes eld
\end_inset

linac.py
\begin_inset Quotes erd
\end_inset

 in Python.
\end_layout

\begin_layout Standard
When developing and adding a new C file to the codebase, the following changes
 need to be made to the compilation:
\end_layout

\begin_layout Enumerate
Add a #include 
\begin_inset Quotes eld
\end_inset

module.h
\begin_inset Quotes erd
\end_inset

 and %include 
\begin_inset Quotes eld
\end_inset

module.h
\begin_inset Quotes erd
\end_inset

 into linac.i in the correct places (this will be obvious after looking at
 the file, but be wary of the differences between the hash and percent character
s in swig interface files.)
\end_layout

\begin_layout Enumerate
Add references to the .c file and respective .o file to the compile and link
 commands in 
\begin_inset Quotes eld
\end_inset

doswig.sh
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Configuration Files
\end_layout

\begin_layout Standard
The extension 
\begin_inset Quotes eld
\end_inset

.cfg
\begin_inset Quotes erd
\end_inset

 was chosen to be a standard.
 Filenames cannot have an open bracket 
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

 as the first character and a close bracket 
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset

 as the last character (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Scripting"

\end_inset

).
 Watch out for missing commas in JSON files! The Python library does not
 always catch syntax errors and provide useful messages.
 Also watch out for ,.'s! They are not parsed as excepted.
 For example, 
\begin_inset Quotes eld
\end_inset

[.3,.2]
\begin_inset Quotes erd
\end_inset

 will not be parsed correctly; instead write 
\begin_inset Quotes eld
\end_inset

[0.3,0.2]
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Building-the-dictionary"

\end_inset

Building the dictionary
\end_layout

\begin_layout Standard
The configuration files are read in the order provided, with latter files
 overwriting conflicting fields from previously read in files.
 For example, if config1.cfg defines 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:3, and config2.cfg defines 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:5, the simulation will be run with 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:5.
 Overlapping dictionaries are overlayed, however, so that if config1.cfg
 defines 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:{
\begin_inset Quotes erd
\end_inset

a
\begin_inset Quotes erd
\end_inset

:1,
\begin_inset Quotes erd
\end_inset

b
\begin_inset Quotes erd
\end_inset

:2} and config2.cfg defines 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:{
\begin_inset Quotes erd
\end_inset

b
\begin_inset Quotes erd
\end_inset

:3}, the result will be 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:{
\begin_inset Quotes erd
\end_inset

a
\begin_inset Quotes erd
\end_inset

:1,
\begin_inset Quotes erd
\end_inset

b
\begin_inset Quotes erd
\end_inset

:3}.
 The routine used for this process is loadconfig.py:OverlayDict().
\end_layout

\begin_layout Subsection
Evaluating expressions into numerical values.
\end_layout

\begin_layout Standard
Fields that except numerical values can also take in strings that can be
 expressions that will be evaluated.
 The evaluation is lazy, so that the strings will be evaluated when the
 value is looked for, after the dictionary is built.
 That means that parameters redefined in later configuration files will
 affect expressions in previously loaded files.
 For example, if config1.cfg defines 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:3,
\begin_inset Quotes erd
\end_inset

y
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

3*x
\begin_inset Quotes erd
\end_inset

, and config2.cfg defines 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:4, the final dictionary will be 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

:4,
\begin_inset Quotes erd
\end_inset

y
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

3*x
\begin_inset Quotes erd
\end_inset

, so that the simulation will see y=12 when the dictionary is parsed.
 
\end_layout

\begin_layout Standard
When a string is encountered, fields in the expression are searched for
 at the local level first, and then at the topmost level.
 Placing fields at the topmost level is useful for definined physical constants.
 Consider the following configuration file:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"pi":3.14,
\end_layout

\begin_layout Plain Layout

	"x":4,
\end_layout

\begin_layout Plain Layout

	"y":3,
\end_layout

\begin_layout Plain Layout

	"subdict":{
\end_layout

\begin_layout Plain Layout

		"x":8,
\end_layout

\begin_layout Plain Layout

		"w":"2*x",
\end_layout

\begin_layout Plain Layout

		"item_of_interest":{
\end_layout

\begin_layout Plain Layout

			"d":"pi*y",
\end_layout

\begin_layout Plain Layout

			"y":4,
\end_layout

\begin_layout Plain Layout

			"z":"2*x"
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The field 
\begin_inset Quotes eld
\end_inset

d
\begin_inset Quotes erd
\end_inset

 will evaluate to 4
\begin_inset Formula $\pi$
\end_inset

, because it looks for 
\begin_inset Quotes eld
\end_inset

pi
\begin_inset Quotes erd
\end_inset

, fails to find it in the local dictionary, but then finds it at the topmost
 level, and then it looks for 
\begin_inset Quotes eld
\end_inset

y
\begin_inset Quotes erd
\end_inset

, and finds it in the current level and does not look at the top level.
 The field 
\begin_inset Quotes eld
\end_inset

z
\begin_inset Quotes erd
\end_inset

 evaluates to 8 because 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

 is not found at the local level, and then only the topmost level is searched.
 The 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

 in subdict will never be found by an expression inside of 
\begin_inset Quotes eld
\end_inset

item_of_interest
\begin_inset Quotes erd
\end_inset

.
 However, 
\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset

 inside of 
\begin_inset Quotes eld
\end_inset

subdict
\begin_inset Quotes erd
\end_inset

 evaluates to 
\begin_inset Quotes eld
\end_inset

16
\begin_inset Quotes erd
\end_inset

, because it found 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

 in the local level.
\end_layout

\begin_layout Standard
The routine used for this process is readjson.py:readentry().
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Scripting"

\end_inset

Command Line Scripting
\end_layout

\begin_layout Standard
If a filename provided is of the format 
\begin_inset Quotes eld
\end_inset

{...}
\begin_inset Quotes erd
\end_inset

, it is interpretted as a dictionary directly instead of a filename.
 The regular expression used to check for this case is ^{.*}$.
 This is to facilitate commandline scripting of parameter searches without
 having to write hundreds of one-line configuration files.
 The suggested usage of this feature is, for example:
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

In [11]: for x in [1,2,3]:
\end_layout

\begin_layout Plain Layout

    print ('python main.py out.txt config1.cfg 
\backslash

\end_layout

\begin_layout Plain Layout

config2.cfg {{"Cavity0":{{"E":{0}}}'.format(x))
\end_layout

\begin_layout Plain Layout

   ....:
\end_layout

\begin_layout Plain Layout

python main.py out.txt config1.cfg config2.cfg {"Cavity0":{"E":1}} 
\end_layout

\begin_layout Plain Layout

python main.py out.txt config1.cfg config2.cfg {"Cavity0":{"E":2}}
\end_layout

\begin_layout Plain Layout

python main.py out.txt config1.cfg config2.cfg {"Cavity0":{"E":3}} 
\end_layout

\end_inset

where instead of 
\begin_inset Quotes eld
\end_inset

print
\begin_inset Quotes erd
\end_inset

 one would call os.system('python...') or some other tool to batch commands.
 Notice that the {{ is used to escape out a single { in a python format
 specifier.
 This feature can also be used to call the code from the command, for example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python main.py out.txt config1.cfg config2.cfg {
\backslash
"Cavity0
\backslash
":{
\backslash
"E
\backslash
":0.1}}}
\end_layout

\end_inset

where the quotation marks 
\begin_inset Quotes eld
\end_inset

 had to be escaped as 
\backslash

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The routine main.py:DoSimulation() can also be called with a Python script,
 with the argument ConfigFiles being a list of filenames, which can also
 use the 
\begin_inset Quotes eld
\end_inset

{...}
\begin_inset Quotes erd
\end_inset

 syntax.
\end_layout

\begin_layout Subsection
#include
\end_layout

\begin_layout Standard
Configuration files can provide a 
\begin_inset Quotes eld
\end_inset

#include
\begin_inset Quotes erd
\end_inset

 key in the toplevel dictionary.
 This will cause the file names listed to be scanned as dictionaries in
 the order they are listed 
\emph on
before 
\emph default
the current file is added to the dictionary.
 Therefore, entries in the current configuration file will overwrite those
 in files it includes.
 This was only added as a convenience: 
\emph on
RECURSIVE INCLUDES ARE NOT HANDLED AND WILL CAUSE AN INFINITE LOOP.
 USE WITH CAUTION.
\end_layout

\begin_layout Standard
Suggested usage is to have 
\emph on
only one top-level file with include statements
\emph default
, which specifies the files to be included, to reduce the number of parameters
 that need to be passed in via command line.
 For example, the lengthy command
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python main.py out.txt /path/to/config1.cfg config2.cfg config3.cfg config4.cfg
\end_layout

\end_inset

can be simplified by making a new config file, say 
\begin_inset Quotes eld
\end_inset

master.cfg
\begin_inset Quotes erd
\end_inset

, containing
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"#include":["/path/to/config1.cfg",
\end_layout

\begin_layout Plain Layout

		"config2.cfg",
\end_layout

\begin_layout Plain Layout

		"config3.cfg",
\end_layout

\begin_layout Plain Layout

		"config4.cfg"
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

and instead running the command
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python main.py out.txt master.cfg
\end_layout

\end_inset

We envision this being useful for keeping complicated set ups with configuration
 files in multiple paths in order.
\end_layout

\begin_layout Section
Important Configuration Options
\end_layout

\begin_layout Section
Exhaustive List of Configuration Options
\end_layout

\begin_layout Standard
TODO...
 Hopefully they are self explanatory enough for now.
\end_layout

\end_body
\end_document
