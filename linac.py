# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_linac', [dirname(__file__)])
        except ImportError:
            import _linac
            return _linac
        if fp is not None:
            try:
                _mod = imp.load_module('_linac', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _linac = swig_import_helper()
    del swig_import_helper
else:
    import _linac
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _linac.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _linac.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _linac.intArray___setitem__(self, *args)
    def cast(self): return _linac.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.intArray_frompointer
    if _newclass:frompointer = staticmethod(_linac.intArray_frompointer)
intArray_swigregister = _linac.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _linac.intArray_frompointer(*args)
intArray_frompointer = _linac.intArray_frompointer

class complexdouble_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complexdouble_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complexdouble_Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _linac.new_complexdouble_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_complexdouble_Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _linac.complexdouble_Array___getitem__(self, *args)
    def __setitem__(self, *args): return _linac.complexdouble_Array___setitem__(self, *args)
    def cast(self): return _linac.complexdouble_Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.complexdouble_Array_frompointer
    if _newclass:frompointer = staticmethod(_linac.complexdouble_Array_frompointer)
complexdouble_Array_swigregister = _linac.complexdouble_Array_swigregister
complexdouble_Array_swigregister(complexdouble_Array)

def complexdouble_Array_frompointer(*args):
  return _linac.complexdouble_Array_frompointer(*args)
complexdouble_Array_frompointer = _linac.complexdouble_Array_frompointer

class double_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _linac.new_double_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_double_Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _linac.double_Array___getitem__(self, *args)
    def __setitem__(self, *args): return _linac.double_Array___setitem__(self, *args)
    def cast(self): return _linac.double_Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.double_Array_frompointer
    if _newclass:frompointer = staticmethod(_linac.double_Array_frompointer)
double_Array_swigregister = _linac.double_Array_swigregister
double_Array_swigregister(double_Array)

def double_Array_frompointer(*args):
  return _linac.double_Array_frompointer(*args)
double_Array_frompointer = _linac.double_Array_frompointer

class Linac_Param_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linac_Param_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Linac_Param_Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _linac.new_Linac_Param_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Linac_Param_Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _linac.Linac_Param_Array___getitem__(self, *args)
    def __setitem__(self, *args): return _linac.Linac_Param_Array___setitem__(self, *args)
    def cast(self): return _linac.Linac_Param_Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.Linac_Param_Array_frompointer
    if _newclass:frompointer = staticmethod(_linac.Linac_Param_Array_frompointer)
Linac_Param_Array_swigregister = _linac.Linac_Param_Array_swigregister
Linac_Param_Array_swigregister(Linac_Param_Array)

def Linac_Param_Array_frompointer(*args):
  return _linac.Linac_Param_Array_frompointer(*args)
Linac_Param_Array_frompointer = _linac.Linac_Param_Array_frompointer

class Linac_State_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linac_State_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Linac_State_Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _linac.new_Linac_State_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Linac_State_Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _linac.Linac_State_Array___getitem__(self, *args)
    def __setitem__(self, *args): return _linac.Linac_State_Array___setitem__(self, *args)
    def cast(self): return _linac.Linac_State_Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.Linac_State_Array_frompointer
    if _newclass:frompointer = staticmethod(_linac.Linac_State_Array_frompointer)
Linac_State_Array_swigregister = _linac.Linac_State_Array_swigregister
Linac_State_Array_swigregister(Linac_State_Array)

def Linac_State_Array_frompointer(*args):
  return _linac.Linac_State_Array_frompointer(*args)
Linac_State_Array_frompointer = _linac.Linac_State_Array_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _linac.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _linac.intp_assign(self, *args)
    def value(self): return _linac.intp_value(self)
    def cast(self): return _linac.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.intp_frompointer
    if _newclass:frompointer = staticmethod(_linac.intp_frompointer)
intp_swigregister = _linac.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _linac.intp_frompointer(*args)
intp_frompointer = _linac.intp_frompointer

class compp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _linac.new_compp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_compp
    __del__ = lambda self : None;
    def assign(self, *args): return _linac.compp_assign(self, *args)
    def value(self): return _linac.compp_value(self)
    def cast(self): return _linac.compp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.compp_frompointer
    if _newclass:frompointer = staticmethod(_linac.compp_frompointer)
compp_swigregister = _linac.compp_swigregister
compp_swigregister(compp)

def compp_frompointer(*args):
  return _linac.compp_frompointer(*args)
compp_frompointer = _linac.compp_frompointer

class LINPp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LINPp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LINPp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _linac.new_LINPp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_LINPp
    __del__ = lambda self : None;
    def assign(self, *args): return _linac.LINPp_assign(self, *args)
    def value(self): return _linac.LINPp_value(self)
    def cast(self): return _linac.LINPp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.LINPp_frompointer
    if _newclass:frompointer = staticmethod(_linac.LINPp_frompointer)
LINPp_swigregister = _linac.LINPp_swigregister
LINPp_swigregister(LINPp)

def LINPp_frompointer(*args):
  return _linac.LINPp_frompointer(*args)
LINPp_frompointer = _linac.LINPp_frompointer

class LINSp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LINSp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LINSp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _linac.new_LINSp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_LINSp
    __del__ = lambda self : None;
    def assign(self, *args): return _linac.LINSp_assign(self, *args)
    def value(self): return _linac.LINSp_value(self)
    def cast(self): return _linac.LINSp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _linac.LINSp_frompointer
    if _newclass:frompointer = staticmethod(_linac.LINSp_frompointer)
LINSp_swigregister = _linac.LINSp_swigregister
LINSp_swigregister(LINSp)

def LINSp_frompointer(*args):
  return _linac.LINSp_frompointer(*args)
LINSp_frompointer = _linac.LINSp_frompointer

class Doublecompress_State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Doublecompress_State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Doublecompress_State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ipk"] = _linac.Doublecompress_State_Ipk_set
    __swig_getmethods__["Ipk"] = _linac.Doublecompress_State_Ipk_get
    if _newclass:Ipk = _swig_property(_linac.Doublecompress_State_Ipk_get, _linac.Doublecompress_State_Ipk_set)
    __swig_setmethods__["sz"] = _linac.Doublecompress_State_sz_set
    __swig_getmethods__["sz"] = _linac.Doublecompress_State_sz_get
    if _newclass:sz = _swig_property(_linac.Doublecompress_State_sz_get, _linac.Doublecompress_State_sz_set)
    __swig_setmethods__["dE_E"] = _linac.Doublecompress_State_dE_E_set
    __swig_getmethods__["dE_E"] = _linac.Doublecompress_State_dE_E_get
    if _newclass:dE_E = _swig_property(_linac.Doublecompress_State_dE_E_get, _linac.Doublecompress_State_dE_E_set)
    __swig_setmethods__["sd"] = _linac.Doublecompress_State_sd_set
    __swig_getmethods__["sd"] = _linac.Doublecompress_State_sd_get
    if _newclass:sd = _swig_property(_linac.Doublecompress_State_sd_get, _linac.Doublecompress_State_sd_set)
    __swig_setmethods__["dt"] = _linac.Doublecompress_State_dt_set
    __swig_getmethods__["dt"] = _linac.Doublecompress_State_dt_get
    if _newclass:dt = _swig_property(_linac.Doublecompress_State_dt_get, _linac.Doublecompress_State_dt_set)
    __swig_setmethods__["sdsgn"] = _linac.Doublecompress_State_sdsgn_set
    __swig_getmethods__["sdsgn"] = _linac.Doublecompress_State_sdsgn_get
    if _newclass:sdsgn = _swig_property(_linac.Doublecompress_State_sdsgn_get, _linac.Doublecompress_State_sdsgn_set)
    __swig_setmethods__["k"] = _linac.Doublecompress_State_k_set
    __swig_getmethods__["k"] = _linac.Doublecompress_State_k_get
    if _newclass:k = _swig_property(_linac.Doublecompress_State_k_get, _linac.Doublecompress_State_k_set)
    __swig_setmethods__["Eloss"] = _linac.Doublecompress_State_Eloss_set
    __swig_getmethods__["Eloss"] = _linac.Doublecompress_State_Eloss_get
    if _newclass:Eloss = _swig_property(_linac.Doublecompress_State_Eloss_get, _linac.Doublecompress_State_Eloss_set)
    __swig_setmethods__["dE_Ei"] = _linac.Doublecompress_State_dE_Ei_set
    __swig_getmethods__["dE_Ei"] = _linac.Doublecompress_State_dE_Ei_get
    if _newclass:dE_Ei = _swig_property(_linac.Doublecompress_State_dE_Ei_get, _linac.Doublecompress_State_dE_Ei_set)
    __swig_setmethods__["dE_Ei2"] = _linac.Doublecompress_State_dE_Ei2_set
    __swig_getmethods__["dE_Ei2"] = _linac.Doublecompress_State_dE_Ei2_get
    if _newclass:dE_Ei2 = _swig_property(_linac.Doublecompress_State_dE_Ei2_get, _linac.Doublecompress_State_dE_Ei2_set)
    __swig_setmethods__["cor"] = _linac.Doublecompress_State_cor_set
    __swig_getmethods__["cor"] = _linac.Doublecompress_State_cor_get
    if _newclass:cor = _swig_property(_linac.Doublecompress_State_cor_get, _linac.Doublecompress_State_cor_set)
    def __init__(self): 
        this = _linac.new_Doublecompress_State()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Doublecompress_State
    __del__ = lambda self : None;
Doublecompress_State_swigregister = _linac.Doublecompress_State_swigregister
Doublecompress_State_swigregister(Doublecompress_State)

class Dynamic_Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dynamic_Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dynamic_Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dQ_Q"] = _linac.Dynamic_Param_dQ_Q_set
    __swig_getmethods__["dQ_Q"] = _linac.Dynamic_Param_dQ_Q_get
    if _newclass:dQ_Q = _swig_property(_linac.Dynamic_Param_dQ_Q_get, _linac.Dynamic_Param_dQ_Q_set)
    __swig_setmethods__["dtg"] = _linac.Dynamic_Param_dtg_set
    __swig_getmethods__["dtg"] = _linac.Dynamic_Param_dtg_get
    if _newclass:dtg = _swig_property(_linac.Dynamic_Param_dtg_get, _linac.Dynamic_Param_dtg_set)
    __swig_setmethods__["dE_ing"] = _linac.Dynamic_Param_dE_ing_set
    __swig_getmethods__["dE_ing"] = _linac.Dynamic_Param_dE_ing_get
    if _newclass:dE_ing = _swig_property(_linac.Dynamic_Param_dE_ing_get, _linac.Dynamic_Param_dE_ing_set)
    __swig_setmethods__["dsig_z"] = _linac.Dynamic_Param_dsig_z_set
    __swig_getmethods__["dsig_z"] = _linac.Dynamic_Param_dsig_z_get
    if _newclass:dsig_z = _swig_property(_linac.Dynamic_Param_dsig_z_get, _linac.Dynamic_Param_dsig_z_set)
    __swig_setmethods__["dsig_E"] = _linac.Dynamic_Param_dsig_E_set
    __swig_getmethods__["dsig_E"] = _linac.Dynamic_Param_dsig_E_get
    if _newclass:dsig_E = _swig_property(_linac.Dynamic_Param_dsig_E_get, _linac.Dynamic_Param_dsig_E_set)
    __swig_setmethods__["dchirp"] = _linac.Dynamic_Param_dchirp_set
    __swig_getmethods__["dchirp"] = _linac.Dynamic_Param_dchirp_get
    if _newclass:dchirp = _swig_property(_linac.Dynamic_Param_dchirp_get, _linac.Dynamic_Param_dchirp_set)
    __swig_setmethods__["adc_noise"] = _linac.Dynamic_Param_adc_noise_set
    __swig_getmethods__["adc_noise"] = _linac.Dynamic_Param_adc_noise_get
    if _newclass:adc_noise = _swig_property(_linac.Dynamic_Param_adc_noise_get, _linac.Dynamic_Param_adc_noise_set)
    def __init__(self): 
        this = _linac.new_Dynamic_Param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Dynamic_Param
    __del__ = lambda self : None;
Dynamic_Param_swigregister = _linac.Dynamic_Param_swigregister
Dynamic_Param_swigregister(Dynamic_Param)


def Doublecompress_State_Alloc(*args):
  return _linac.Doublecompress_State_Alloc(*args)
Doublecompress_State_Alloc = _linac.Doublecompress_State_Alloc

def Doublecompress_State_Dealloc(*args):
  return _linac.Doublecompress_State_Dealloc(*args)
Doublecompress_State_Dealloc = _linac.Doublecompress_State_Dealloc

def Doublecompress_State_Attach(*args):
  return _linac.Doublecompress_State_Attach(*args)
Doublecompress_State_Attach = _linac.Doublecompress_State_Attach

def doublecompress_octave(*args):
  return _linac.doublecompress_octave(*args)
doublecompress_octave = _linac.doublecompress_octave

def doublecompress_better(*args):
  return _linac.doublecompress_better(*args)
doublecompress_better = _linac.doublecompress_better

def doublecompress_new(*args):
  return _linac.doublecompress_new(*args)
doublecompress_new = _linac.doublecompress_new
class Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alloc_order"] = _linac.Filter_alloc_order_set
    __swig_getmethods__["alloc_order"] = _linac.Filter_alloc_order_get
    if _newclass:alloc_order = _swig_property(_linac.Filter_alloc_order_get, _linac.Filter_alloc_order_set)
    __swig_setmethods__["alloc_coeffs"] = _linac.Filter_alloc_coeffs_set
    __swig_getmethods__["alloc_coeffs"] = _linac.Filter_alloc_coeffs_get
    if _newclass:alloc_coeffs = _swig_property(_linac.Filter_alloc_coeffs_get, _linac.Filter_alloc_coeffs_set)
    __swig_setmethods__["n_coeffs"] = _linac.Filter_n_coeffs_set
    __swig_getmethods__["n_coeffs"] = _linac.Filter_n_coeffs_get
    if _newclass:n_coeffs = _swig_property(_linac.Filter_n_coeffs_get, _linac.Filter_n_coeffs_set)
    __swig_setmethods__["order"] = _linac.Filter_order_set
    __swig_getmethods__["order"] = _linac.Filter_order_get
    if _newclass:order = _swig_property(_linac.Filter_order_get, _linac.Filter_order_set)
    __swig_setmethods__["modes"] = _linac.Filter_modes_set
    __swig_getmethods__["modes"] = _linac.Filter_modes_get
    if _newclass:modes = _swig_property(_linac.Filter_modes_get, _linac.Filter_modes_set)
    __swig_setmethods__["coeff_start"] = _linac.Filter_coeff_start_set
    __swig_getmethods__["coeff_start"] = _linac.Filter_coeff_start_get
    if _newclass:coeff_start = _swig_property(_linac.Filter_coeff_start_get, _linac.Filter_coeff_start_set)
    __swig_setmethods__["coeffs"] = _linac.Filter_coeffs_set
    __swig_getmethods__["coeffs"] = _linac.Filter_coeffs_get
    if _newclass:coeffs = _swig_property(_linac.Filter_coeffs_get, _linac.Filter_coeffs_set)
    __swig_setmethods__["poles"] = _linac.Filter_poles_set
    __swig_getmethods__["poles"] = _linac.Filter_poles_get
    if _newclass:poles = _swig_property(_linac.Filter_poles_get, _linac.Filter_poles_set)
    def __init__(self): 
        this = _linac.new_Filter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Filter
    __del__ = lambda self : None;
Filter_swigregister = _linac.Filter_swigregister
Filter_swigregister(Filter)

class Filter_State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter_State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter_State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _linac.Filter_State_state_set
    __swig_getmethods__["state"] = _linac.Filter_State_state_get
    if _newclass:state = _swig_property(_linac.Filter_State_state_get, _linac.Filter_State_state_set)
    __swig_setmethods__["input"] = _linac.Filter_State_input_set
    __swig_getmethods__["input"] = _linac.Filter_State_input_get
    if _newclass:input = _swig_property(_linac.Filter_State_input_get, _linac.Filter_State_input_set)
    def __init__(self): 
        this = _linac.new_Filter_State()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Filter_State
    __del__ = lambda self : None;
Filter_State_swigregister = _linac.Filter_State_swigregister
Filter_State_swigregister(Filter_State)


def Filter_Allocate_New(*args):
  return _linac.Filter_Allocate_New(*args)
Filter_Allocate_New = _linac.Filter_Allocate_New

def Filter_Allocate_In(*args):
  return _linac.Filter_Allocate_In(*args)
Filter_Allocate_In = _linac.Filter_Allocate_In

def Filter_Deallocate(*args):
  return _linac.Filter_Deallocate(*args)
Filter_Deallocate = _linac.Filter_Deallocate

def Filter_Append_Modes(*args):
  return _linac.Filter_Append_Modes(*args)
Filter_Append_Modes = _linac.Filter_Append_Modes

def Filter_State_Allocate(*args):
  return _linac.Filter_State_Allocate(*args)
Filter_State_Allocate = _linac.Filter_State_Allocate

def Filter_State_Deallocate(*args):
  return _linac.Filter_State_Deallocate(*args)
Filter_State_Deallocate = _linac.Filter_State_Deallocate

def Filter_Step(*args):
  return _linac.Filter_Step(*args)
Filter_Step = _linac.Filter_Step
class FPGA_Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPGA_Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FPGA_Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gain"] = _linac.FPGA_Param_gain_set
    __swig_getmethods__["gain"] = _linac.FPGA_Param_gain_get
    if _newclass:gain = _swig_property(_linac.FPGA_Param_gain_get, _linac.FPGA_Param_gain_set)
    __swig_setmethods__["int_gain"] = _linac.FPGA_Param_int_gain_set
    __swig_getmethods__["int_gain"] = _linac.FPGA_Param_int_gain_get
    if _newclass:int_gain = _swig_property(_linac.FPGA_Param_int_gain_get, _linac.FPGA_Param_int_gain_set)
    __swig_setmethods__["set_point"] = _linac.FPGA_Param_set_point_set
    __swig_getmethods__["set_point"] = _linac.FPGA_Param_set_point_get
    if _newclass:set_point = _swig_property(_linac.FPGA_Param_set_point_get, _linac.FPGA_Param_set_point_set)
    def __init__(self): 
        this = _linac.new_FPGA_Param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_FPGA_Param
    __del__ = lambda self : None;
FPGA_Param_swigregister = _linac.FPGA_Param_swigregister
FPGA_Param_swigregister(FPGA_Param)

class Cavity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cavity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cavity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psd_llrf"] = _linac.Cavity_psd_llrf_set
    __swig_getmethods__["psd_llrf"] = _linac.Cavity_psd_llrf_get
    if _newclass:psd_llrf = _swig_property(_linac.Cavity_psd_llrf_get, _linac.Cavity_psd_llrf_set)
    __swig_setmethods__["w0"] = _linac.Cavity_w0_set
    __swig_getmethods__["w0"] = _linac.Cavity_w0_get
    if _newclass:w0 = _swig_property(_linac.Cavity_w0_get, _linac.Cavity_w0_set)
    __swig_setmethods__["bunch_rep"] = _linac.Cavity_bunch_rep_set
    __swig_getmethods__["bunch_rep"] = _linac.Cavity_bunch_rep_get
    if _newclass:bunch_rep = _swig_property(_linac.Cavity_bunch_rep_get, _linac.Cavity_bunch_rep_set)
    __swig_setmethods__["Q_L"] = _linac.Cavity_Q_L_set
    __swig_getmethods__["Q_L"] = _linac.Cavity_Q_L_get
    if _newclass:Q_L = _swig_property(_linac.Cavity_Q_L_get, _linac.Cavity_Q_L_set)
    __swig_setmethods__["R_Q"] = _linac.Cavity_R_Q_set
    __swig_getmethods__["R_Q"] = _linac.Cavity_R_Q_get
    if _newclass:R_Q = _swig_property(_linac.Cavity_R_Q_get, _linac.Cavity_R_Q_set)
    __swig_setmethods__["beta_in"] = _linac.Cavity_beta_in_set
    __swig_getmethods__["beta_in"] = _linac.Cavity_beta_in_get
    if _newclass:beta_in = _swig_property(_linac.Cavity_beta_in_get, _linac.Cavity_beta_in_set)
    __swig_setmethods__["beta_out"] = _linac.Cavity_beta_out_set
    __swig_getmethods__["beta_out"] = _linac.Cavity_beta_out_get
    if _newclass:beta_out = _swig_property(_linac.Cavity_beta_out_get, _linac.Cavity_beta_out_set)
    __swig_setmethods__["beta_beam"] = _linac.Cavity_beta_beam_set
    __swig_getmethods__["beta_beam"] = _linac.Cavity_beta_beam_get
    if _newclass:beta_beam = _swig_property(_linac.Cavity_beta_beam_get, _linac.Cavity_beta_beam_set)
    __swig_setmethods__["bandw"] = _linac.Cavity_bandw_set
    __swig_getmethods__["bandw"] = _linac.Cavity_bandw_get
    if _newclass:bandw = _swig_property(_linac.Cavity_bandw_get, _linac.Cavity_bandw_set)
    __swig_setmethods__["noise_rms"] = _linac.Cavity_noise_rms_set
    __swig_getmethods__["noise_rms"] = _linac.Cavity_noise_rms_get
    if _newclass:noise_rms = _swig_property(_linac.Cavity_noise_rms_get, _linac.Cavity_noise_rms_set)
    __swig_setmethods__["bw_ol"] = _linac.Cavity_bw_ol_set
    __swig_getmethods__["bw_ol"] = _linac.Cavity_bw_ol_get
    if _newclass:bw_ol = _swig_property(_linac.Cavity_bw_ol_get, _linac.Cavity_bw_ol_set)
    __swig_setmethods__["k"] = _linac.Cavity_k_set
    __swig_getmethods__["k"] = _linac.Cavity_k_get
    if _newclass:k = _swig_property(_linac.Cavity_k_get, _linac.Cavity_k_set)
    __swig_setmethods__["nom_beam_phase"] = _linac.Cavity_nom_beam_phase_set
    __swig_getmethods__["nom_beam_phase"] = _linac.Cavity_nom_beam_phase_get
    if _newclass:nom_beam_phase = _swig_property(_linac.Cavity_nom_beam_phase_get, _linac.Cavity_nom_beam_phase_set)
    __swig_setmethods__["rf_phase"] = _linac.Cavity_rf_phase_set
    __swig_getmethods__["rf_phase"] = _linac.Cavity_rf_phase_get
    if _newclass:rf_phase = _swig_property(_linac.Cavity_rf_phase_get, _linac.Cavity_rf_phase_set)
    __swig_setmethods__["design_voltage"] = _linac.Cavity_design_voltage_set
    __swig_getmethods__["design_voltage"] = _linac.Cavity_design_voltage_get
    if _newclass:design_voltage = _swig_property(_linac.Cavity_design_voltage_get, _linac.Cavity_design_voltage_set)
    __swig_setmethods__["unity_voltage"] = _linac.Cavity_unity_voltage_set
    __swig_getmethods__["unity_voltage"] = _linac.Cavity_unity_voltage_get
    if _newclass:unity_voltage = _swig_property(_linac.Cavity_unity_voltage_get, _linac.Cavity_unity_voltage_set)
    def __init__(self): 
        this = _linac.new_Cavity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Cavity
    __del__ = lambda self : None;
Cavity_swigregister = _linac.Cavity_swigregister
Cavity_swigregister(Cavity)

class Linac_Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linac_Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Linac_Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dE"] = _linac.Linac_Param_dE_set
    __swig_getmethods__["dE"] = _linac.Linac_Param_dE_get
    if _newclass:dE = _swig_property(_linac.Linac_Param_dE_get, _linac.Linac_Param_dE_set)
    __swig_setmethods__["R56"] = _linac.Linac_Param_R56_set
    __swig_getmethods__["R56"] = _linac.Linac_Param_R56_get
    if _newclass:R56 = _swig_property(_linac.Linac_Param_R56_get, _linac.Linac_Param_R56_set)
    __swig_setmethods__["T566"] = _linac.Linac_Param_T566_set
    __swig_getmethods__["T566"] = _linac.Linac_Param_T566_get
    if _newclass:T566 = _swig_property(_linac.Linac_Param_T566_get, _linac.Linac_Param_T566_set)
    __swig_setmethods__["phi"] = _linac.Linac_Param_phi_set
    __swig_getmethods__["phi"] = _linac.Linac_Param_phi_get
    if _newclass:phi = _swig_property(_linac.Linac_Param_phi_get, _linac.Linac_Param_phi_set)
    __swig_setmethods__["lam"] = _linac.Linac_Param_lam_set
    __swig_getmethods__["lam"] = _linac.Linac_Param_lam_get
    if _newclass:lam = _swig_property(_linac.Linac_Param_lam_get, _linac.Linac_Param_lam_set)
    __swig_setmethods__["s0"] = _linac.Linac_Param_s0_set
    __swig_getmethods__["s0"] = _linac.Linac_Param_s0_get
    if _newclass:s0 = _swig_property(_linac.Linac_Param_s0_get, _linac.Linac_Param_s0_set)
    __swig_setmethods__["a"] = _linac.Linac_Param_a_set
    __swig_getmethods__["a"] = _linac.Linac_Param_a_get
    if _newclass:a = _swig_property(_linac.Linac_Param_a_get, _linac.Linac_Param_a_set)
    __swig_setmethods__["L"] = _linac.Linac_Param_L_set
    __swig_getmethods__["L"] = _linac.Linac_Param_L_get
    if _newclass:L = _swig_property(_linac.Linac_Param_L_get, _linac.Linac_Param_L_set)
    __swig_setmethods__["n_cav"] = _linac.Linac_Param_n_cav_set
    __swig_getmethods__["n_cav"] = _linac.Linac_Param_n_cav_get
    if _newclass:n_cav = _swig_property(_linac.Linac_Param_n_cav_get, _linac.Linac_Param_n_cav_set)
    __swig_setmethods__["nom_grad"] = _linac.Linac_Param_nom_grad_set
    __swig_getmethods__["nom_grad"] = _linac.Linac_Param_nom_grad_get
    if _newclass:nom_grad = _swig_property(_linac.Linac_Param_nom_grad_get, _linac.Linac_Param_nom_grad_set)
    __swig_setmethods__["saturate_c"] = _linac.Linac_Param_saturate_c_set
    __swig_getmethods__["saturate_c"] = _linac.Linac_Param_saturate_c_get
    if _newclass:saturate_c = _swig_property(_linac.Linac_Param_saturate_c_get, _linac.Linac_Param_saturate_c_set)
    __swig_setmethods__["RXF"] = _linac.Linac_Param_RXF_set
    __swig_getmethods__["RXF"] = _linac.Linac_Param_RXF_get
    if _newclass:RXF = _swig_property(_linac.Linac_Param_RXF_get, _linac.Linac_Param_RXF_set)
    __swig_setmethods__["TRF1"] = _linac.Linac_Param_TRF1_set
    __swig_getmethods__["TRF1"] = _linac.Linac_Param_TRF1_get
    if _newclass:TRF1 = _swig_property(_linac.Linac_Param_TRF1_get, _linac.Linac_Param_TRF1_set)
    __swig_setmethods__["TRF2"] = _linac.Linac_Param_TRF2_set
    __swig_getmethods__["TRF2"] = _linac.Linac_Param_TRF2_get
    if _newclass:TRF2 = _swig_property(_linac.Linac_Param_TRF2_get, _linac.Linac_Param_TRF2_set)
    __swig_setmethods__["Cav_Fil"] = _linac.Linac_Param_Cav_Fil_set
    __swig_getmethods__["Cav_Fil"] = _linac.Linac_Param_Cav_Fil_get
    if _newclass:Cav_Fil = _swig_property(_linac.Linac_Param_Cav_Fil_get, _linac.Linac_Param_Cav_Fil_set)
    __swig_setmethods__["fpga"] = _linac.Linac_Param_fpga_set
    __swig_getmethods__["fpga"] = _linac.Linac_Param_fpga_get
    if _newclass:fpga = _swig_property(_linac.Linac_Param_fpga_get, _linac.Linac_Param_fpga_set)
    __swig_setmethods__["cav"] = _linac.Linac_Param_cav_set
    __swig_getmethods__["cav"] = _linac.Linac_Param_cav_get
    if _newclass:cav = _swig_property(_linac.Linac_Param_cav_get, _linac.Linac_Param_cav_set)
    __swig_setmethods__["drift"] = _linac.Linac_Param_drift_set
    __swig_getmethods__["drift"] = _linac.Linac_Param_drift_get
    if _newclass:drift = _swig_property(_linac.Linac_Param_drift_get, _linac.Linac_Param_drift_set)
    def __init__(self): 
        this = _linac.new_Linac_Param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Linac_Param
    __del__ = lambda self : None;
Linac_Param_swigregister = _linac.Linac_Param_swigregister
Linac_Param_swigregister(Linac_Param)

class Gun_Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gun_Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gun_Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["E"] = _linac.Gun_Param_E_set
    __swig_getmethods__["E"] = _linac.Gun_Param_E_get
    if _newclass:E = _swig_property(_linac.Gun_Param_E_get, _linac.Gun_Param_E_set)
    __swig_setmethods__["sz0"] = _linac.Gun_Param_sz0_set
    __swig_getmethods__["sz0"] = _linac.Gun_Param_sz0_get
    if _newclass:sz0 = _swig_property(_linac.Gun_Param_sz0_get, _linac.Gun_Param_sz0_set)
    __swig_setmethods__["sd0"] = _linac.Gun_Param_sd0_set
    __swig_getmethods__["sd0"] = _linac.Gun_Param_sd0_get
    if _newclass:sd0 = _swig_property(_linac.Gun_Param_sd0_get, _linac.Gun_Param_sd0_set)
    __swig_setmethods__["Q"] = _linac.Gun_Param_Q_set
    __swig_getmethods__["Q"] = _linac.Gun_Param_Q_get
    if _newclass:Q = _swig_property(_linac.Gun_Param_Q_get, _linac.Gun_Param_Q_set)
    def __init__(self): 
        this = _linac.new_Gun_Param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Gun_Param
    __del__ = lambda self : None;
Gun_Param_swigregister = _linac.Gun_Param_swigregister
Gun_Param_swigregister(Gun_Param)


def Linac_Config(*args):
  return _linac.Linac_Config(*args)
Linac_Config = _linac.Linac_Config

def Linac_Deallocate(*args):
  return _linac.Linac_Deallocate(*args)
Linac_Deallocate = _linac.Linac_Deallocate

def Cavity_Config(*args):
  return _linac.Cavity_Config(*args)
Cavity_Config = _linac.Cavity_Config

def FPGA_Config(*args):
  return _linac.FPGA_Config(*args)
FPGA_Config = _linac.FPGA_Config

def Gun_Config(*args):
  return _linac.Gun_Config(*args)
Gun_Config = _linac.Gun_Config
class FPGA_State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPGA_State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FPGA_State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drive"] = _linac.FPGA_State_drive_set
    __swig_getmethods__["drive"] = _linac.FPGA_State_drive_get
    if _newclass:drive = _swig_property(_linac.FPGA_State_drive_get, _linac.FPGA_State_drive_set)
    __swig_setmethods__["state"] = _linac.FPGA_State_state_set
    __swig_getmethods__["state"] = _linac.FPGA_State_state_get
    if _newclass:state = _swig_property(_linac.FPGA_State_state_get, _linac.FPGA_State_state_set)
    __swig_setmethods__["err"] = _linac.FPGA_State_err_set
    __swig_getmethods__["err"] = _linac.FPGA_State_err_get
    if _newclass:err = _swig_property(_linac.FPGA_State_err_get, _linac.FPGA_State_err_set)
    def __init__(self): 
        this = _linac.new_FPGA_State()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_FPGA_State
    __del__ = lambda self : None;
FPGA_State_swigregister = _linac.FPGA_State_swigregister
FPGA_State_swigregister(FPGA_State)

class Cavity_State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cavity_State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cavity_State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["beam"] = _linac.Cavity_State_beam_set
    __swig_getmethods__["beam"] = _linac.Cavity_State_beam_get
    if _newclass:beam = _swig_property(_linac.Cavity_State_beam_get, _linac.Cavity_State_beam_set)
    __swig_setmethods__["voltage"] = _linac.Cavity_State_voltage_set
    __swig_getmethods__["voltage"] = _linac.Cavity_State_voltage_get
    if _newclass:voltage = _swig_property(_linac.Cavity_State_voltage_get, _linac.Cavity_State_voltage_set)
    def __init__(self): 
        this = _linac.new_Cavity_State()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Cavity_State
    __del__ = lambda self : None;
Cavity_State_swigregister = _linac.Cavity_State_swigregister
Cavity_State_swigregister(Cavity_State)

class Linac_State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linac_State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Linac_State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RXF"] = _linac.Linac_State_RXF_set
    __swig_getmethods__["RXF"] = _linac.Linac_State_RXF_get
    if _newclass:RXF = _swig_property(_linac.Linac_State_RXF_get, _linac.Linac_State_RXF_set)
    __swig_setmethods__["TRF1"] = _linac.Linac_State_TRF1_set
    __swig_getmethods__["TRF1"] = _linac.Linac_State_TRF1_get
    if _newclass:TRF1 = _swig_property(_linac.Linac_State_TRF1_get, _linac.Linac_State_TRF1_set)
    __swig_setmethods__["TRF2"] = _linac.Linac_State_TRF2_set
    __swig_getmethods__["TRF2"] = _linac.Linac_State_TRF2_get
    if _newclass:TRF2 = _swig_property(_linac.Linac_State_TRF2_get, _linac.Linac_State_TRF2_set)
    __swig_setmethods__["Cav_Fil"] = _linac.Linac_State_Cav_Fil_set
    __swig_getmethods__["Cav_Fil"] = _linac.Linac_State_Cav_Fil_get
    if _newclass:Cav_Fil = _swig_property(_linac.Linac_State_Cav_Fil_get, _linac.Linac_State_Cav_Fil_set)
    __swig_setmethods__["fpga"] = _linac.Linac_State_fpga_set
    __swig_getmethods__["fpga"] = _linac.Linac_State_fpga_get
    if _newclass:fpga = _swig_property(_linac.Linac_State_fpga_get, _linac.Linac_State_fpga_set)
    __swig_setmethods__["cav"] = _linac.Linac_State_cav_set
    __swig_getmethods__["cav"] = _linac.Linac_State_cav_get
    if _newclass:cav = _swig_property(_linac.Linac_State_cav_get, _linac.Linac_State_cav_set)
    __swig_setmethods__["RXF_out"] = _linac.Linac_State_RXF_out_set
    __swig_getmethods__["RXF_out"] = _linac.Linac_State_RXF_out_get
    if _newclass:RXF_out = _swig_property(_linac.Linac_State_RXF_out_get, _linac.Linac_State_RXF_out_set)
    def __init__(self): 
        this = _linac.new_Linac_State()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Linac_State
    __del__ = lambda self : None;
Linac_State_swigregister = _linac.Linac_State_swigregister
Linac_State_swigregister(Linac_State)


def make_state_arrays(*args):
  return _linac.make_state_arrays(*args)
make_state_arrays = _linac.make_state_arrays

def cycle_buffer(*args):
  return _linac.cycle_buffer(*args)
cycle_buffer = _linac.cycle_buffer

def Linac_State_Allocate(*args):
  return _linac.Linac_State_Allocate(*args)
Linac_State_Allocate = _linac.Linac_State_Allocate

def Linac_State_Deallocate(*args):
  return _linac.Linac_State_Deallocate(*args)
Linac_State_Deallocate = _linac.Linac_State_Deallocate

def step_llrf(*args):
  return _linac.step_llrf(*args)
step_llrf = _linac.step_llrf

def phase_shift(*args):
  return _linac.phase_shift(*args)
phase_shift = _linac.phase_shift

def step_fpga(*args):
  return _linac.step_fpga(*args)
step_fpga = _linac.step_fpga

def step_PI_fpga(*args):
  return _linac.step_PI_fpga(*args)
step_PI_fpga = _linac.step_PI_fpga

def saturate(*args):
  return _linac.saturate(*args)
saturate = _linac.saturate

def step_triode(*args):
  return _linac.step_triode(*args)
step_triode = _linac.step_triode

def step_cavity(*args):
  return _linac.step_cavity(*args)
step_cavity = _linac.step_cavity

def allocate_states(*args):
  return _linac.allocate_states(*args)
allocate_states = _linac.allocate_states

def deallocate_states(*args):
  return _linac.deallocate_states(*args)
deallocate_states = _linac.deallocate_states

def state_space_top(*args):
  return _linac.state_space_top(*args)
state_space_top = _linac.state_space_top
class BBF_Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBF_Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBF_Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["U_control"] = _linac.BBF_Param_U_control_set
    __swig_getmethods__["U_control"] = _linac.BBF_Param_U_control_get
    if _newclass:U_control = _swig_property(_linac.BBF_Param_U_control_get, _linac.BBF_Param_U_control_set)
    __swig_setmethods__["idx_control"] = _linac.BBF_Param_idx_control_set
    __swig_getmethods__["idx_control"] = _linac.BBF_Param_idx_control_get
    if _newclass:idx_control = _swig_property(_linac.BBF_Param_idx_control_get, _linac.BBF_Param_idx_control_set)
    __swig_setmethods__["U_measured"] = _linac.BBF_Param_U_measured_set
    __swig_getmethods__["U_measured"] = _linac.BBF_Param_U_measured_get
    if _newclass:U_measured = _swig_property(_linac.BBF_Param_U_measured_get, _linac.BBF_Param_U_measured_set)
    __swig_setmethods__["idx_measured"] = _linac.BBF_Param_idx_measured_set
    __swig_getmethods__["idx_measured"] = _linac.BBF_Param_idx_measured_get
    if _newclass:idx_measured = _swig_property(_linac.BBF_Param_idx_measured_get, _linac.BBF_Param_idx_measured_set)
    __swig_setmethods__["V_control"] = _linac.BBF_Param_V_control_set
    __swig_getmethods__["V_control"] = _linac.BBF_Param_V_control_get
    if _newclass:V_control = _swig_property(_linac.BBF_Param_V_control_get, _linac.BBF_Param_V_control_set)
    __swig_setmethods__["V_measured"] = _linac.BBF_Param_V_measured_set
    __swig_getmethods__["V_measured"] = _linac.BBF_Param_V_measured_get
    if _newclass:V_measured = _swig_property(_linac.BBF_Param_V_measured_get, _linac.BBF_Param_V_measured_set)
    __swig_setmethods__["Mpinv"] = _linac.BBF_Param_Mpinv_set
    __swig_getmethods__["Mpinv"] = _linac.BBF_Param_Mpinv_get
    if _newclass:Mpinv = _swig_property(_linac.BBF_Param_Mpinv_get, _linac.BBF_Param_Mpinv_set)
    def __init__(self): 
        this = _linac.new_BBF_Param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_BBF_Param
    __del__ = lambda self : None;
BBF_Param_swigregister = _linac.BBF_Param_swigregister
BBF_Param_swigregister(BBF_Param)


def BBF_Param_Alloc(*args):
  return _linac.BBF_Param_Alloc(*args)
BBF_Param_Alloc = _linac.BBF_Param_Alloc

def BBF_Param_Free(*args):
  return _linac.BBF_Param_Free(*args)
BBF_Param_Free = _linac.BBF_Param_Free

def BBF_Step(*args):
  return _linac.BBF_Step(*args)
BBF_Step = _linac.BBF_Step
N_NOISE_PARAM = _linac.N_NOISE_PARAM
N_NOISE_SET = _linac.N_NOISE_SET
class Noise_Source(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Noise_Source, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Noise_Source, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _linac.Noise_Source_type_set
    __swig_getmethods__["type"] = _linac.Noise_Source_type_get
    if _newclass:type = _swig_property(_linac.Noise_Source_type_get, _linac.Noise_Source_type_set)
    __swig_setmethods__["settings"] = _linac.Noise_Source_settings_set
    __swig_getmethods__["settings"] = _linac.Noise_Source_settings_get
    if _newclass:settings = _swig_property(_linac.Noise_Source_settings_get, _linac.Noise_Source_settings_set)
    def __init__(self): 
        this = _linac.new_Noise_Source()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _linac.delete_Noise_Source
    __del__ = lambda self : None;
Noise_Source_swigregister = _linac.Noise_Source_swigregister
Noise_Source_swigregister(Noise_Source)


def Apply_Noise(*args):
  return _linac.Apply_Noise(*args)
Apply_Noise = _linac.Apply_Noise
# This file is compatible with both classic and new-style classes.


